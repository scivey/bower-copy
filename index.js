// Generated by CoffeeScript 1.10.0
(function() {
  var _, async, copyComponents, copyMain, copyMainTo, extractMain, flatsplat, fs, inBowerDir, joinPath, mainFromFolder, path, readJSON, resolveComponents,
    slice = [].slice;

  fs = require("fs-extra");

  _ = require("underscore");

  path = require("path");

  async = require("async");

  flatsplat = function(list) {
    if (list.length === 1 && _.isArray(list[0])) {
      return list[0];
    } else {
      return list;
    }
  };

  inBowerDir = function() {
    var _path, pathParts;
    pathParts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    pathParts = ["bower_components/"].concat(flatsplat(pathParts));
    _path = path.join.apply(null, pathParts);
    return _path;
  };

  readJSON = function(filePath, cb) {
    return fs.readFile(filePath, "utf8", function(err, res) {
      var _json;
      _json = JSON.parse(res);
      return cb(null, _json);
    });
  };

  joinPath = function(bowerPath, main) {
    var _main, _match, relativeRegex;
    _main = main;
    relativeRegex = /^\.\/(.+)$/im;
    _match = relativeRegex.exec(_main);
    if (_match != null) {
      _main = _match[1];
    }
    return path.join(path.dirname(bowerPath), main);
  };

  extractMain = function(filePath, data, cb) {
    var _main, mainPath, p;
    _main = data.main;
    if (_main == null) {
      return null;
    }
    mainPath = (function() {
      var i, len, results;
      if (Array.isArray(_main)) {
        results = [];
        for (i = 0, len = _main.length; i < len; i++) {
          p = _main[i];
          results.push(joinPath(filePath, p));
        }
        return results;
      } else {
        return [joinPath(filePath, _main)];
      }
    })();
    return mainPath;
  };

  mainFromFolder = function(folderName, cb) {
    var _filePath;
    _filePath = inBowerDir(folderName, ".bower.json");
    return readJSON(_filePath, function(err, pkg) {
      var mainPath;
      mainPath = extractMain(_filePath, pkg);
      if (mainPath.length > 0) {
        return cb(null, {
          component: folderName,
          main: mainPath
        });
      } else {
        _filePath = inBowerDir(folderName, "package.json");
        return readJSON(_filePath, function(err, pkg) {
          mainPath = extractMain(_filePath, pkg);
          return cb(null, {
            component: folderName,
            main: mainPath
          });
        });
      }
    });
  };

  copyMain = function(scriptRef, outputDir, cb) {
    var cbHandler, copyScript, filesToCopy, scriptPaths;
    scriptPaths = scriptRef.main;
    filesToCopy = scriptPaths.length;
    copyScript = function(scriptRef, outputDir, cb) {
      var scriptPath;
      return scriptPath = scriptRef.main;
    };
    cbHandler = function(scriptPath, outputPath) {
      return function(err) {
        if (filesToCopy === 1) {
          cb(null, {
            src: scriptPath,
            dest: outputPath
          });
        }
        return filesToCopy--;
      };
    };
    return scriptPaths.forEach(function(p) {
      var outputPath;
      outputPath = path.join(outputDir, path.basename(p));
      return fs.copy(p, outputPath, cbHandler(p, outputPath));
    });
  };

  copyMainTo = function(outputDir) {
    return function(scriptRef, cb) {
      return copyMain(scriptRef, outputDir, cb);
    };
  };

  copyComponents = function(options, cb) {
    var _copyFn, _opts;
    _opts = _.clone(options);
    if (_opts.src == null) {
      _opts.src = "./bower_components";
    }
    if (_opts.dest == null) {
      throw new Error("No destination specified.");
    }
    _copyFn = function() {
      return fs.readdir(_opts.src, function(err, folders) {
        return async.map(folders, mainFromFolder, function(err, completed) {
          return async.map(completed, copyMainTo(_opts.dest), function(err, copied) {
            return cb(null, copied);
          });
        });
      });
    };
    return fs.exists(_opts.dest, function(exists) {
      if (exists) {
        return _copyFn();
      } else {
        return fs.mkdirs(_opts.dest, function(err) {
          return _copyFn();
        });
      }
    });
  };

  resolveComponents = function(bowerDir, cb) {
    if (_.isFunction(bowerDir)) {
      cb = bowerDir;
      bowerDir = "./bower_components";
    }
    return fs.readdir(bowerDir, function(err, folders) {
      return async.map(folders, mainFromFolder, function(err, resolved) {
        return cb(null, resolved);
      });
    });
  };

  module.exports = {
    copyComponents: copyComponents,
    resolveComponents: resolveComponents
  };

}).call(this);
